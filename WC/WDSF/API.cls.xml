<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WC.Wdsf.API">
<Abstract>1</Abstract>
<TimeCreated>63370,70147.479703</TimeCreated>

<Method name="Call">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMethod:%String,pUrl:%String,&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%Library.Base</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set pResponse = ##class(%ZEN.proxyObject).%New()
	
 	try 
 	{
		set req = ##class(%Net.HttpRequest).%New()
		set req.SSLConfiguration = ##class(WC.Data.Settings).GetWDSFSSL()
	  	set req.Server = "services.worlddancesport.org"
	  	set req.Https = 1
	  	set req.Port = 443	
	  	set req.Authorization = "Basic "_$system.Encryption.Base64Encode(##class(WC.Data.Settings).GetWDSFLogin()_":"_##class(WC.Data.Settings).GetWDSFPassword())
	 
  		set pUrl = "/api/1"_pUrl
	 	$$$TOE(st, req.Send($zconvert(pMethod, "u"), pUrl))
 		set json = req.HttpResponse.Data.Read(10000000, .st)
 		
 		if (req.HttpResponse.StatusCode '= 200){
 			$$$ThrowStatus(##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_BadStatus", "HTTP Status="_req.HttpResponse.StatusCode))
 		}
 		
 		$$$TOE(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.pResponse))
 	}
 	catch (ex){
  		set st = ex.AsStatus()
 	}
 
	if $$$ISOK(st) && ($CLASSNAME(pResponse) = "%ZEN.proxyObject"){
	 	set st = $CASE(pResponse.Code, 
	 					401 : ##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_ResponseCode_401"),
	 					403 : ##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_ResponseCode_403"),
	 					404 : ##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_ResponseCode_404"),
	 					409 : ##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_ResponseCode_409"),
	 					500 : ##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_ResponseCode_500"),
	 					200	: $$$OK,
	 					""	: $$$OK,
	 						: ##class(WC.Utils.Msg).GetErrorStatus("error_WDSF_UnknownCode", "Code="_pResponse.Code))
 	}
 	
 	quit pResponse
]]></Implementation>
</Method>

<Method name="GetCompetitions">
<Description>
Get all competitions, use query parameters
from [DateTime] : list competitions since and including this date (YYYY/MM/DD)
to [DateTime] : list competitions after and including this date (YYYY/MM/DD)
modifiedsince [Date] : list competitions that have been modified since this date (YYYY/MM/DDThh:mm:ss)
division [string] : General/Professional
status: The status of the competition. Valid values are:PreRegistration, Registering, RegistrationClosed, Processing, Closed, Canceled
location: The city name where the competition takes/took place.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[from:%String="",to:%String="",modifiedsince:%String="",division:%String="",status:%String="",location:%String="",&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set url = "/competition?format=json"
	
	if (from '= "") set url = url_"&from="_from
	if (to '= "") set url = url_"&to="_to
	if (modifiedsince '= "") set url = url_"&modifiedsince="_modifiedsince
	if (division '= "") set url = url_"&division="_division
	if (status '= "") set url = url_"&status="_status
	if (location '= "") set url = url_"&location="_location
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetCompetitionById">
<Description>
Get one competition by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/competition/"_id_"?format=json"
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetTournamentCompetitionsByGroupId">
<Description>
Get competitions in group|tournament</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set url = "/competition?format=json&groupId="_id
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
Get person by id (MIN)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/person/"_+id_"?format=json"
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetPersons">
<Description>
All persons by filter</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[name:%String="",&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set url = "/person?format=json"
	
	if (name '= "") set url = url_"&name="_name
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetCouples">
<Description>
Get couples, use query parameters
name [string] : list all couples where any member's name starts with this filter's value. Separate name und surname with a comma(,). The order is not relevant.
min [int] : list couples where any member's MIN is the filter's value(1xxxxxxx can be omitted)
ageGroup [string] : list couples of an age group (Adult, Senior I, Senior II, Youth, ...)
division [string] : General/Professional</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[min:%String="",name:%String="",ageGroup:%String="",division:%String="",&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set url = "/couple?format=json"
	
	if (name '= "") set url = url_"&name="_name
	if (min '= "") set url = url_"&min="_+min
	if (ageGroup '= "") set url = url_"&ageGroup="_ageGroup
	if (division '= "") set url = url_"&division="_division
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetCouple">
<Description>
Get couple by id, example id = rls-1802</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/couple/"_id_"?format=json"
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetAgeGroups">
<Description>
Get all age groups</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set url = "/age?format=json"
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>

<Method name="GetCountries">
<Description>
Get all countries</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set url = "/country?format=json"
	
	quit ..Call("GET", url, .st)
]]></Implementation>
</Method>
</Class>
</Export>
