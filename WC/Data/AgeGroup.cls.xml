<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WC.Data.AgeGroup">
<Super>%Persistent</Super>
<TimeCreated>63372,1026.334306</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="AllowedToDanceIn">
<Type>AgeGroup</Type>
<Collection>list</Collection>
<Parameter name="CollectionDisplayDelimiter" value="&quot;,&quot;"/>
</Property>

<Property name="Division">
<Type>Division</Type>
<Required>1</Required>
</Property>

<Property name="FromAge">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="ToAge">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="MaxDob">
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {MaxDob} = ##class({%%CLASSNAME}).GetMaxDob({FromAge})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="MinDob">
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {MinDob} = ##class({%%CLASSNAME}).GetMinDob({ToAge})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="NameIdx">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetMaxDob">
<ClassMethod>1</ClassMethod>
<FormalSpec>fromAge:%Integer</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	set currYear = $P($ZD($ZTS, 3), "-", 1)
	quit $ZDH((currYear - fromAge)_"-12-31", 3)
]]></Implementation>
</Method>

<Method name="GetMinDob">
<ClassMethod>1</ClassMethod>
<FormalSpec>toAge:%Integer</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	set currYear = $P($ZD($ZTS, 3), "-", 1)
	quit $ZDH((currYear - toAge)_"-01-01", 3)
]]></Implementation>
</Method>

<Method name="CheckAllowed">
<ClassMethod>1</ClassMethod>
<FormalSpec>age:%String,checkingAge:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	quit:(age = checkingAge) $$$YES
	
	set ageObj = ..NameIdxOpen(age)
	for i=1:1:ageObj.AllowedToDanceIn.Count(){
		if (ageObj.AllowedToDanceIn.GetAt(i).Name = checkingAge) return $$$YES
	}
	
	quit $$$NO
]]></Implementation>
</Method>

<Method name="Import">
<Description>
w ##class(WC.Data.AgeGroup).Import()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set groups = ##class(WC.Wdsf.API).GetAgeGroups()
		
		for i=1:1:groups.Count(){
			set group = groups.GetAt(i)
			
			if (..NameIdxExists(group.name) = $$$YES){
				set age = ..NameIdxOpen(group.name)
			}
			else{
				set age = ..%New()
				set age.Name = group.name
			}
			
			set age.ToAge = group.toAge
			set age.FromAge = group.fromAge
			if (group.divisions.Count() = 2){
				set age.Division = ##class(WC.Data.Division).NameIdxOpen("Any")
			}
			else{
				set age.Division = ##class(WC.Data.Division).NameIdxOpen(group.divisions.GetAt(1))
			}
			
			$$$THROWONERROR(st, age.%Save())	 
		}
		
		for i=1:1:groups.Count(){
			set group = groups.GetAt(i)
			set age = ..NameIdxOpen(group.name)
			
			for k=1:1:group.AllowedToDanceIn.Count(){
				do age.AllowedToDanceIn.Insert(..NameIdxOpen(group.AllowedToDanceIn.GetAt(k)))
			}
			
			$$$THROWONERROR(st, age.%Save())
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^WC.Data.AgeGroupD</DataLocation>
<DefaultData>AgeGroupDefaultData</DefaultData>
<IdLocation>^WC.Data.AgeGroupD</IdLocation>
<IndexLocation>^WC.Data.AgeGroupI</IndexLocation>
<StreamLocation>^WC.Data.AgeGroupS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AgeGroupDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>FromAge</Value>
</Value>
<Value name="4">
<Value>ToAge</Value>
</Value>
<Value name="5">
<Value>Division</Value>
</Value>
<Value name="6">
<Value>Allowed</Value>
</Value>
<Value name="7">
<Value>AllowedToDanceIn</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
