<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WC.Web.JsonAdmin">
<Super>WC.Web.JsonBase</Super>
<TimeCreated>63370,70836.6459</TimeCreated>

<Method name="Registration">
<Description>

=============================================================================================================================
Registration / Deregistration                                                                   Registration / Deregistration
=============================================================================================================================

Create participant for competition
Method="POST" Url="/registration"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		if ($FIND($CLASSNAME(data.competitions), "ListOf") = 0) || (data.competitions.Count() = 0){
			set %response.Status = 400
			return ##class(WC.Utils.Response).NotArray("competitions").%ToJSON()
		}
		
		set responsesList = ##class(%ListOfObjects).%New()
		
		for i=1:1:data.competitions.Count(){
			set stReg = ..RegistrationOne(data.competitions.GetAt(i), data.manNumber, data.womanNumber, .response)
			
			set result = ##class(%ZEN.proxyObject).%New()
			set result.request = ##class(%ZEN.proxyObject).%New()
			set result.request.competitionId = data.competitions.GetAt(i)
			set result.request.manNumber = data.manNumber
			set result.request.womanNumber = data.womanNumber
			set result.response = response
			do responsesList.Insert(result)		
		}
		
		set proxy.status = $$$OK
		set proxy.results = responsesList
	}
	catch(ex){
		set %response.Status = 400
		set proxy.status = $SYSTEM.Status.GetOneErrorText(ex.AsStatus())
	}	
	
	quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="RegistrationOne">
<Description>
Create participant for competition
Method="POST" Url="/registration"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[competitionId:%String,manNumber:%String,womanNumber:%String,&response]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response = ##class(%ZEN.proxyObject).%New()
		
	try{
		
		// Check for registration (couple|solo)
		set participant = ##class(WC.Data.Participant).GetByNymbers(competitionId, manNumber, womanNumber)
		if $ISOBJECT(participant){
			set response = ##class(WC.Utils.Response).RegistrationExists(participant)
			return $$$OK
		}
		
		// Recorder. Verify existence.
		set recorder = ##class(WC.Data.Recorder).GetCurrentRecorder(.st)
		if $$$ISERR(st)	{
			set response = ##class(WC.Utils.Response).RecorderNotFound()
			return st
		}
		
		// Competition. Verify existence.
		set competition = ##class(WC.Data.Competition).%OpenId(competitionId,,.st)
		if $$$ISERR(st) {
			set response = ##class(WC.Utils.Response).CompetitionNotFound()
			return st
		}
		
		// Competition. Verify status
		if (competition.CStatus.Name '= "Registering") {
			set response = ##class(WC.Utils.Response).CompetitionStatusNotForRegistration(competition)
			return ##class(WC.Utils.Msg).GetErrorStatus("error_CompetitionStatusNotForRegistration")
		}
		
		// Check recorder privileges
		set st = ##class(WC.Data.Recorder).CheckPrivileges(recorder.%Id(), competition.Tournament.%Id())
		if $$$ISERR(st) {
			set response = ##class(WC.Utils.Response).RecorderNoPrivileges(competition.Tournament)
			return st
		}
		
		// Find conflict competition(tournament) by day
		set cmpListConflictMan = ##class(WC.Data.Person).GetConflictCompetitions(manNumber, competitionId, .cfSt1)
							 						   		
		if (cmpListConflictMan.Count() > 0){
			set response = ##class(WC.Utils.Response).CompetitionConflictSameDayRegistration(cmpListConflictMan, ##class(WC.Data.Person).%OpenId(manNumber))
			return ##class(WC.Utils.Msg).GetErrorStatus("error_ManCompetitionConflictSameDayRegistration")
		}
		else{
			set cmpListConflictWoman = ##class(WC.Data.Person).GetConflictCompetitions(womanNumber, competitionId, .cfSt2)
			if (cmpListConflictWoman.Count() > 0){
				set response = ##class(WC.Utils.Response).CompetitionConflictSameDayRegistration(cmpListConflictWoman, ##class(WC.Data.Person).%OpenId(womanNumber))
				return ##class(WC.Utils.Msg).GetErrorStatus("error_WomanCompetitionConflictSameDayRegistration")
			}
		}
		
		set numbers = ##class(%ZEN.proxyObject).%New()
		set numbers.manNumber = manNumber
		set numbers.womanNumber = womanNumber
		
		// Check competition type (Solo|Couple)
		set participantClassName = ""
		if (competition.IsSolo){
			set participantClassName = "WC.Data.ParticipantSingle"
			
			// Only one number needed, not two
			if (manNumber '= "") && (womanNumber '= ""){
				set response = ##class(WC.Utils.Response).CompetitionIsSoloForOneAthlete(competition)
				return ##class(WC.Utils.Msg).GetErrorStatus("error_CompetitionIsSoloForOneAthlete")
			}
			
			// Only one number needed
			if (manNumber = "") && (womanNumber = ""){
				set response = ##class(WC.Utils.Response).AthleteEmptyNumber()
				return ##class(WC.Utils.Msg).GetErrorStatus("error_AthleteEmptyNumber")
			}
			
			set numbers.number = $SELECT(manNumber = ""   : womanNumber, 
							    		 womanNumber = "" : manNumber, 
									  	      		    1 : "") 
		} 
		else{
			set participantClassName = "WC.Data.ParticipantCouple"
			
			// Two numbers is needed
			if (manNumber = "") || (womanNumber = ""){
				set response = ##class(WC.Utils.Response).AthleteEmptyNumber()
				return ##class(WC.Utils.Msg).GetErrorStatus("error_AthleteEmptyNumber")
			}	
		}
		
		do ##class(WC.Utils.Journal).Create("Registration start", "Web.JsonAdmin.Registration()", "Before creating participant: Recorder="_recorder.Login_"; CompetitionId="_competition.%Id()_"; data.manNumber="_manNumber_"; data.womanNumber="_womanNumber)
		
		TSTART
		
		set participant = $CLASSMETHOD(participantClassName, "Create", recorder, competition, numbers, .response, .st)
		
		if $$$ISERR(st) {
			TROLLBACK
			return st
		}
		
		TCOMMIT
		
		do ##class(WC.Utils.Journal).Create("Registration end", "Web.JsonAdmin.Registration()", "After creating participant: Recorder="_recorder.Login_"; CompetitionId="_competition.%Id()_"; data.manNumber="_manNumber_"; data.womanNumber="_womanNumber)
		set response = ##class(WC.Utils.Response).RegistrationCompleted(participant)
		return $$$OK 	
	}
	catch(ex){
		if ($TLEVEL '= 0){
			TROLLBACK
		}
		
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="Deregistration">
<Description>
Remove participant from competition
Method="POST" Url="/deregistration"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		// For test
		if '$DATA(%response) set %response = ##class(%ZEN.proxyObject).%New()
		if '$ISOBJECT(data) $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
	
		// Competition. Verify existence.
		set competition = ##class(WC.Data.Competition).%OpenId(data.competitionId,,.st)
		if $$$ISERR(st) {
			set %response.Status = "400"
			return ##class(WC.Utils.Response).CompetitionNotFound().%ToJSON()
		}
		
		// Check for registration (couple|solo)
		if '$ISOBJECT(##class(WC.Data.Participant).GetByNymbers(data.competitionId, data.manNumber, data.womanNumber)){
			return ##class(WC.Utils.Response).RegistrationNotExists().%ToJSON()
		}
		
		// Recorder. Verify existence.
		set recorder = ##class(WC.Data.Recorder).GetCurrentRecorder(.st)
		if $$$ISERR(st)	{
			set %response.Status = "400"
			return ##class(WC.Utils.Response).RecorderNotFound().%ToJSON()
		}		
		
		// Competition. Verify status
		if (competition.CStatus.Name '= "Registering") {
			set %response.Status = "400"
			return ##class(WC.Utils.Response).CompetitionStatusNotForDeregistration(competition).%ToJSON()
		}
		
		// Check recorder privileges
		if $$$ISERR(##class(WC.Data.Recorder).CheckPrivileges(recorder.%Id(), competition.Tournament.%Id())) {
			set %response.Status = "400"
			return ##class(WC.Utils.Response).RecorderNoPrivileges(competition.Tournament).%ToJSON()
		}
		
		// Check competition type (Solo|Couple)
		set participantClassName = ""
		if (competition.IsSolo){
			set participantClassName = "WC.Data.ParticipantSingle"
			
			// Only one number needed, not two
			if (data.manNumber '= "") && (data.womanNumber '= ""){
				set %response.Status = "400"
				return ##class(WC.Utils.Response).CompetitionIsSoloForOneAthlete(competition).%ToJSON()
			}
		
			set data.number = $SELECT(data.manNumber = ""   : data.womanNumber,
									  data.womanNumber = "" : data.manNumber, 
									 					  1 : "") 
		} 
		else{
			set participantClassName = "WC.Data.ParticipantCouple"
			
			// Two numbers is needed
			if (data.manNumber = "") || (data.womanNumber = ""){
				set %response.Status = "400"
				return ##class(WC.Utils.Response).AthleteEmptyNumber()
			}	
		}
		
		do ##class(WC.Utils.Journal).Create("Deregistration start", "Web.JsonAdmin.Deregistration()", "Before removing participant: Recorder="_recorder.Login_"; CompetitionId="_competition.%Id()_"; data.manNumber="_data.manNumber_"; data.womanNumber="_data.womanNumber)
		
		TSTART
		
		set st = $CLASSMETHOD(participantClassName, "Delete", recorder, competition, data, .response)
		
		if $$$ISERR(st) {
			TROLLBACK
			set %response.Status = "400"
			return response.%ToJSON()
		}
		
		TCOMMIT
		
		do ##class(WC.Utils.Journal).Create("Deregistration end", "Web.JsonAdmin.Deregistration()", "After removing participant: Recorder="_recorder.Login_"; CompetitionId="_competition.%Id()_"; data.manNumber="_data.manNumber_"; data.womanNumber="_data.womanNumber)
		
		do ##class(WC.Utils.Response).DeregistrationCompleted().%ToJSON()	
	}
	catch(ex){
		if ($TLEVEL '= 0){
			TROLLBACK
		}
		
		set st = ex.AsStatus()
	}	
	
	quit st
]]></Implementation>
</Method>

<Method name="GetTournament">
<Description>

=============================================================================================================================
Tournament                                                                                                         Tournament
=============================================================================================================================

Get one tournament by Id
Method="GET" Url="/tournament/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set tr = ##class(WC.Data.Tournament).%OpenId(id,,.st)
		if $$$ISERR(st) {
			set %response.Status = "400"	
			return ##class(WC.Utils.Response).TournamentNotFound().%ToJSON()
		}
		
		do tr.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetTournaments">
<Description><![CDATA[
Get list of tournaments by filter params
Method="GET" Url="/tournament". Filter example params: ?from=2014-01-01&to=2014-01-31&country=Russ"]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set from = $REPLACE($GET(%request.Data("from", 1)), "/", "-")
		set to = $REPLACE($GET(%request.Data("to", 1)), "/", "-")
		set country = $GET(%request.Data("country", 1))
		set notrecorderId = $GET(%request.Data("notrecorderId", 1))
		set currentRecorder = $CASE($GET(%request.Data("currentRecorder", 1)), "true" : $$$YES, : $$$NO)
		
		set dateMatcher = ##class(%Regex.Matcher).%New("^[0-9]{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|3[0-1])")
		
		set where = ""
		if (from '= ""){
			if (dateMatcher.Match(from) = $$$NO){
				set %response.Status = "400"	
				return ##class(WC.Utils.Response).DateNotValid().%ToJSON()
			}
			
			set where = "StartDate >= "_$ZDH(from, 3)_" AND "
		}
		
		if (to '= ""){
			if (dateMatcher.Match(to) = $$$NO){
				set %response.Status = "400"	
				return ##class(WC.Utils.Response).DateNotValid().%ToJSON()
			}
			set where = where_"EndDate <= "_$ZDH(to, 3)_" AND "
		}
		
		if (country '= ""){
			set where = where_"CountryStr LIKE '%"_..ParseParameter(country)_"%' AND "
		}
		
		if (notrecorderId '= ""){
			set where = where_"ID NOT IN (SELECT AvailableTournaments FROM WC_Data.Recorder_AvailableTournaments WHERE Recorder = '"_..ParseParameter(notrecorderId)_"') AND "
		}
		
		if (currentRecorder = $$$YES){
			set where = where_"ID IN (SELECT AvailableTournaments FROM WC_Data.Recorder_AvailableTournaments WHERE Recorder = '"_##class(WC.Data.Recorder).GetCurrentRecorder().%Id()_"') AND "
		}
		
		if (where '= ""){
			// remove last " AND "
			set where = "WHERE "_$E(where, 1, *-5)_" "
		}
		
		set sql = "SELECT TOP 300 ID "_
				  "FROM WC_Data.Tournament "_
				  where_
				  "ORDER BY StartDate"
		
		set statement = ##class(%SQL.Statement).%New()	
		$$$THROWONERROR(st, statement.%Prepare(sql))		
		set rs = statement.%Execute()

		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.tournaments = ##class(%ListOfObjects).%New()
		while (rs.%Next() '= 0){
			do proxy.tournaments.Insert(##class(WC.Data.Tournament).%OpenId(rs.%GetData(1)).ConvertToProxyObject())
		}
		
		do rs.%Close()						
		do statement.%Close()
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetTournamentsForGrid">
<Description><![CDATA[
Get list of tournaments for GRID
Method="GET" Url="/grid/tournament". Filter example params: ?first=1&last=10&sqlName=StartDate&isDown=1&searchSqlName=Title&searchText=Hello ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set params = ##class(%ZEN.proxyObject).%New()
		set params.first = $GET(%request.Data("first", 1), 1)
		set params.last = $GET(%request.Data("last", 1), 10)
		set params.searchSqlName = $GET(%request.Data("searchSqlName", 1), "Login")
		set params.searchText = $GET(%request.Data("searchText", 1), "")
		set params.isDown = $GET(%request.Data("isDown", 1), $$$YES)
		set params.sqlName = $GET(%request.Data("sqlName", 1), "Login")
		
		set recorderId = $GET(%request.Data("recorderId", 1))
		set whereRequired = ""
		if (recorderId '= ""){
			set whereRequired = "ID IN (SELECT AvailableTournaments FROM WC_Data.Recorder_AvailableTournaments WHERE Recorder = '"_..ParseParameter(recorderId)_"')"
		}
		
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM WC_Data.Tournament", "WC.Data.Tournament", params, whereRequired))
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompetition">
<Description>

=============================================================================================================================
Competition                                                                                                       Competition
=============================================================================================================================

Get one competition by id
Method="GET" Url="/competition/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set cmp = ##class(WC.Data.Competition).SyncWDSF(id, 10000000, .st)
		if $$$ISERR(st) {
			set %response.Status = "400"	
			return ##class(WC.Utils.Response).CompetitionNotFound().%ToJSON()
		}
		
		do cmp.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompetitions">
<Description><![CDATA[
Get list of competitions by filter params
Method="GET" Url="/competition". Filter example params: ?from=2014-01-21&to=2014-11-31&status=Closed&tournamentId=1"]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set tournamentId = $GET(%request.Data("tournamentId", 1))
		set country = $GET(%request.Data("country", 1))
		set status = $GET(%request.Data("status", 1))
		set from = $REPLACE($GET(%request.Data("from", 1)), "/", "-")
		set to = $REPLACE($GET(%request.Data("to", 1)), "/", "-")
		set modifiedsince = $REPLACE($GET(%request.Data("modifiedsince", 1)), "/", "-")
		
		set dateMatcher = ##class(%Regex.Matcher).%New("^[0-9]{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|3[0-1])")
		
		set where = ""
		if (from '= ""){
			if (dateMatcher.Match(from) = $$$NO){
				set %response.Status = "400"	
				return ##class(WC.Utils.Response).DateNotValid().%ToJSON()
			}
			
			set where = "StartDate >= "_$ZDH(from, 3)_" AND "
		}
		
		if (to '= ""){
			if (dateMatcher.Match(to) = $$$NO){
				set %response.Status = "400"	
				return ##class(WC.Utils.Response).DateNotValid().%ToJSON()
			}
			set where = where_"StartDate <= "_$ZDH(to, 3)_" AND "
		}
		
		if (country '= ""){
			set where = where_"Country->Name LIKE '%"_..ParseParameter(country)_"%' AND "
		}
		
		if (modifiedsince '= ""){
			set modifiedsince = $REPLACE(modifiedsince, "T", " ")
			set modifiedDate = $P(modifiedsince, " ", 1)
			set modifiedTime = $P(modifiedsince, " ", 2) 
			if (dateMatcher.Match(modifiedDate) = $$$NO){
				set %response.Status = "400"	
				return ##class(WC.Utils.Response).DateNotValid().%ToJSON()
			}
			
			if (modifiedTime '= "") && $$$ISERR(##class(%Library.TimeStamp).IsValid(modifiedsince)){
				set %response.Status = "400"	
				return ##class(WC.Utils.Response).TimeStampNotValid().%ToJSON()
			}
			
			set where = where_"WDSFLastModified >= '"_modifiedsince_"' AND "
		}
		
		if (status '= ""){
			set where = where_"CStatus->Name = '"_..ParseParameter(status)_"' AND "
		}
		
		if (tournamentId '= ""){
			set where = where_"Tournament = '"_..ParseParameter(tournamentId)_"' AND "
		}
		
		if (where '= ""){
			// remove last " AND "
			set where = "WHERE "_$E(where, 1, *-5)_" "
		}
		
		set sql = "SELECT TOP 300 ID "_
				  "FROM WC_Data.Competition "_
				  where_
				  "ORDER BY StartDate, WDSFLastModified"
		
		set ^temp("cmpSql") = sql
		set statement = ##class(%SQL.Statement).%New()	
		$$$THROWONERROR(st, statement.%Prepare(sql))		
		set rs = statement.%Execute()
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.competitions = ##class(%ListOfObjects).%New()
		while (rs.%Next() '= 0){
			do proxy.competitions.Insert(##class(WC.Data.Competition).%OpenId(rs.%GetData(1)).ConvertToProxyObject())
		}
		
		do rs.%Close()						
		do statement.%Close()
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionsForGrid">
<Description><![CDATA[
Get list of competitions for GRID
Method="GET" Url="/grid/competition". Filter example params: ?first=1&last=10&sqlName=StartDate&isDown=1&searchSqlName=Title&searchText=Hello ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set tournamentId = $GET(%request.Data("tournamentId", 1))
		set params = ##class(%ZEN.proxyObject).%New()
		set params.first = $GET(%request.Data("first", 1), 1)
		set params.last = $GET(%request.Data("last", 1), 10)
		set params.searchSqlName = $GET(%request.Data("searchSqlName", 1), "Discipline->Name")
		set params.searchText = $GET(%request.Data("searchText", 1), "")
		set params.isDown = $GET(%request.Data("isDown", 1), $$$YES)
		set params.sqlName = $GET(%request.Data("sqlName", 1), "Discipline->Name")
		
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM WC_Data.Competition", "WC.Data.Competition", params))
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionYears">
<Description>
Get all years
Method="GET" Url="/year"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfDataTypes).%New()
	
	&sql(DECLARE CursYear CURSOR FOR 
		 	SELECT DISTINCT DATEPART('year', StartDate) As Year
			FROM WC_Data.Competition
			ORDER BY Year)	
		
	&sql(OPEN CursYear)
	for  
	{	
		&sql(FETCH CursYear INTO :year) 
		quit:(SQLCODE '= 0)
		do proxy.children.Insert(year)	
	}
	
	&sql(CLOSE CursYear)
	
	quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="GetParticipant">
<Description>
=============================================================================================================================
Participant                                                                                                       Participant
=============================================================================================================================

Get one participant by id
Method="GET" Url="/participant/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set prt = ##class(WC.Data.Participant).%OpenId(id,,.st)
		if $$$ISERR(st) {
			set %response.Status = "400"	
			return ##class(WC.Utils.Response).ParticipantNotFound().%ToJSON()
		}
		
		do prt.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetParticipants">
<Description>
Get list of participants by filter params
Method="GET" Url="/participant". Filter example params: ?competitionId=1"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set competitionId = $GET(%request.Data("competitionId", 1))
		set coupleId = $GET(%request.Data("coupleId", 1))
		set athleteId = $GET(%request.Data("athleteId", 1))
		
		set tableName = "WC_Data.Participant"
		set where = ""
		if (competitionId '= ""){
			set where = where_"Competition = '"_..ParseParameter(competitionId)_"' AND "
		}
		
		if (coupleId '= ""){
			set tableName = "WC_Data.ParticipantCouple"
			set where = where_"Couple = '"_..ParseParameter(coupleId)_"' AND "
		}
		elseif (athleteId '= ""){
			set tableName = "WC_Data.ParticipantSingle"
			set where = where_"Athlete = '"_..ParseParameter(athleteId)_"' AND "
		}
		
		if (where '= ""){
			// remove last " AND "
			set where = "WHERE "_$E(where, 1, *-5)_" "
		}
		
		set sql = "SELECT TOP 300 ID "_
				  "FROM "_tableName_" "_
				  where_
				  "ORDER BY CreatedTS"
		
		set ^temp = sql
		set statement = ##class(%SQL.Statement).%New()	
		$$$THROWONERROR(st, statement.%Prepare(sql))		
		set rs = statement.%Execute()

		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.participants = ##class(%ListOfObjects).%New()
		while (rs.%Next() '= 0){
			do proxy.participants.Insert(##class(WC.Data.Participant).%OpenId(rs.%GetData(1)).ConvertToProxyObject())
		}
		
		do rs.%Close()						
		do statement.%Close()
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCouple">
<Description>

=============================================================================================================================
Couple                                                                                                                 Couple
=============================================================================================================================

Get one couple by Id
Method="GET" Url="/couple/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set couple = ##class(WC.Data.Couple).SyncWDSF(id, 10000, .st)
		if $$$ISERR(st)	{
			set %response.Status = "400"
			return ##class(WC.Utils.Response).CoupleSyncFailed(id, $SYSTEM.Status.GetErrorText(st)).%ToJSON()
		}
		
		do couple.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCoupleByNumbers">
<Description><![CDATA[
Get one couple by athlete numbers
Method="GET" Url="/couple?manNumber=1111&womanNumber=22222"]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>manNumber:%String,womanNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set wdsfCoupleId = $$$NULLOREF
		
		set coupleOld = ##class(WC.Data.Couple).GetByNumbers(manNumber, womanNumber, .st)
	
		// Get Id of existed couple from DB or find couple Id in WDSF DB by athlete's numbers
		if $$$ISOK(st){
			set wdsfCoupleId = coupleOld.%Id()
		}
		else{
			set wdsfCoupleId = ##class(WC.Data.Couple).GetIdFromWDSF(manNumber, womanNumber, .st)
			if $$$ISERR(st)	{
				set %response.Status = "400"
				return ##class(WC.Utils.Response).CoupleNotFoundInWDSFByNumbers($SYSTEM.Status.GetErrorText(st)).%ToJSON()
			}
		}
		
		kill coupleOld
		
		return ..GetCouple(wdsfCoupleId)
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCoupleByName">
<Description><![CDATA[
Get one couple by athlete numbers
Method="GET" Url="/couple?manFullName=1111&womanFullName=22222"]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>manFullName:%String,womanFullName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set (couple, wdsfCoupleId, SQLCODE) = $$$NULLOREF
		
		set manSurname = $P(manFullName, ",", 1)
		set manName = $P(manFullName, ",", 2)
		set womanSurname = $P(womanFullName, ",", 1)
		set womanName = $P(womanFullName, ",", 2)
		
		
		&sql(SELECT ID INTO :wdsfCoupleId
			 FROM WC_Data.Couple 
			 WHERE %UPPER(Man->Surname) = %UPPER(TRIM(BOTH ' ' FROM :manSurname)) AND
			  	   %UPPER(Man->Name) = %UPPER(TRIM(BOTH ' ' FROM :manName)) AND
			  	   %UPPER(Woman->Surname) = %UPPER(TRIM(BOTH ' ' FROM :womanSurname)) AND
			 	   %UPPER(Woman->Name) = %UPPER(TRIM(BOTH ' ' FROM :womanName)))
		
		if (SQLCODE '= 0){
			w !,manFullName
			set couples = ##class(WC.Wdsf.API).GetCouples("", manFullName,,,.st)
			set loadingCount = 0
			for i=1:1:couples.Count(){
				set coupleWDSF = couples.GetAt(i)
				w !, "i="_i_". Couple name = "_coupleWDSF.name
				
				if ($P(coupleWDSF.name, " - ", 1) [ manSurname) && ($P(coupleWDSF.name, " - ", 2) [ womanSurname){
					set couple = ##class(WC.Data.Couple).SyncWDSF(coupleWDSF.id, 40000, .st)
					$$$THROWONERROR(st, st)
					
					set loadingCount = loadingCount + 1 
					
					if ($ZCVT(couple.Woman.Surname, "U") = $ZCVT(womanSurname, "U")){
						set wdsfCoupleId = couple.%Id()	
						quit
					}
					
					quit:(loadingCount >= 10)
				}
			}	
		}
		
		set couple = ##class(WC.Data.Couple).SyncWDSF(wdsfCoupleId, 40000, .st)
		
		if $$$ISOK(st){
			do couple.ConvertToProxyObject().%ToJSON()
			TCOMMIT
		}
		else{
			TROLLBACK
			//set %response.Status = "400"
			return ##class(WC.Utils.Response).CoupleNotFoundInWDSFByName($SYSTEM.Status.GetErrorText(st)).%ToJSON()	
		}
	}
	catch(ex){
		if $TLEVEL > 0{
			TROLLBACK
		}
		
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCouples">
<Description>
Get list of couples by filter params
Method="GET" Url="/couple". Filter example params: ?min=1000232"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set manNumber = ..ParseParameter($GET(%request.Data("manNumber", 1)))
		set womanNumber = ..ParseParameter($GET(%request.Data("womanNumber", 1)))
		if (manNumber '=  "") && (womanNumber '=  ""){
			return ..GetCoupleByNumbers(manNumber, womanNumber)
		}
		
		set manFullName = ..ParseParameter($GET(%request.Data("manFullName", 1)))
		set womanFullName = ..ParseParameter($GET(%request.Data("womanFullName", 1)))
		if (manFullName '=  "") && (womanFullName '=  ""){
			return ..GetCoupleByName(manFullName, womanFullName)
		}
		
		set min = ..ParseParameter($GET(%request.Data("min", 1)))
		
		set where = ""
		if (min '= ""){
			set where = "(Man = '"_min_"' OR Woman = '"_min_"') AND "
		}
		
		if (where '= ""){
			// remove last " AND "
			set where = "WHERE "_$E(where, 1, *-5)_" "
		}
		
		set sql = "SELECT TOP 300 ID "_
				  "FROM WC_Data.Couple "_
				  where_
				  "ORDER BY Man->Surname"
		
		set statement = ##class(%SQL.Statement).%New()	
		$$$THROWONERROR(st, statement.%Prepare(sql))		
		set rs = statement.%Execute()

		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.couples = ##class(%ListOfObjects).%New()
		while (rs.%Next() '= 0){
			do proxy.couples.Insert(##class(WC.Data.Couple).%OpenId(rs.%GetData(1)).ConvertToProxyObject())
		}
		
		do rs.%Close()						
		do statement.%Close()
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
=============================================================================================================================
Person                                                                                                                 Person
=============================================================================================================================

Get one person by id
Method="GET" Url="/person/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set pr = ##class(WC.Data.Person).SyncWDSF(id, 10000, .st)
		if $$$ISERR(st) {
			set %response.Status = "400"
			return ##class(WC.Utils.Response).PersonSyncFailed(id, $SYSTEM.Status.GetErrorText(st)).%ToJSON()
		}
		
		do pr.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetPersons">
<Description>
Get list of persons by filter params
Method="GET" Url="/person". Filter example params: ?name=Ivanov"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK

	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.persons = ##class(%ListOfObjects).%New()
			
	try{
		set name = ..ParseParameter($GET(%request.Data("name", 1)))
		set sex = ..ParseParameter($GET(%request.Data("sex", 1)))
		
		set where = ""
		if (name '= ""){
			do ##class(WC.Data.Person).SyncWDSFByName(name)
			
			if (name [ ","){
				set where = ""_
				"((Surname = '"_$P(name, ",", 1)_"' AND Name = '"_$P(name, ",", 2)_"')"_
				" OR "_
				"(Surname = '"_$P(name, ",", 2)_"' AND Name = '"_$P(name, ",", 1)_"')) AND "
			}
			else{
				set where = "(Surname LIKE '%"_name_"%' OR Name Like '%"_name_"%') AND "
			}
		}
		
		if (sex '= ""){
			set where = where_"Sex='"_sex_"' AND "
		}
		
		if (where '= ""){
			// remove last " AND "
			set where = "WHERE "_$E(where, 1, *-5)_" "
		}
		
		set sql = "SELECT TOP 300 ID "_
				  "FROM WC_Data.Person "_
				  where_
				  "ORDER BY Surname"
		
		set statement = ##class(%SQL.Statement).%New()	
		$$$THROWONERROR(st, statement.%Prepare(sql))		
		set rs = statement.%Execute()
		
		while (rs.%Next() '= 0){
			do proxy.persons.Insert(##class(WC.Data.Person).%OpenId(rs.%GetData(1)).ConvertToProxyObject())
		}
		
		do rs.%Close()						
		do statement.%Close()
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveRecorder">
<Description>

=============================================================================================================================
Recorder                                                                                                             Recorder
=============================================================================================================================

Save recorder
Method="POST" Url="/recorder"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(WC.Data.Settings).CurrentUserIsAdmin())
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	do ##class(WC.Data.Recorder).Save(data, .st)
      	
      	if $$$ISERR(st){ 
      		$$$ThrowStatus(##class(WC.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"error_Recorder_Create", :"error_Recorder_Save"), "| "_st)) 
      	}
	}
	catch ex {
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetRecorder">
<Description>
Get recorder by id
Method="GET" Url="/recorder/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$THROWONERROR(st, ##class(WC.Data.Settings).CurrentUserIsAdmin())
	quit ..GetProxyObject("WC.Data.Recorder", id).%ToJSON()
]]></Implementation>
</Method>

<Method name="DeleteRecorder">
<Description>
Delete recorder by id
Method="DELETE" Url="/recorder/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set recorder = ##class(WC.Data.Recorder).%OpenId(id)
		set recorder.IsInUse = $$$NO
		set recorder.Login = recorder.Login_"|"_recorder.%Id()
		set st = recorder.%Save() 
		
      	if $$$ISERR(st){ 
      		$$$ThrowStatus(##class(WC.Utils.Msg).GetErrorStatus("error_Recorder_MarkUnused", "| "_st))
      	}      	
	}
	catch ex {
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetRecordersForGrid">
<Description><![CDATA[
Get list of recorders for GRID
Method="GET" Url="/grid/recorder". Filter example params: ?first=1&last=10&sqlName=StartDate&isDown=1&searchSqlName=Title&searchText=Hello]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(WC.Data.Settings).CurrentUserIsAdmin())
		
		set params = ##class(%ZEN.proxyObject).%New()
		set params.first = $GET(%request.Data("first", 1), 1)
		set params.last = $GET(%request.Data("last", 1), 10)
		set params.searchSqlName = $GET(%request.Data("searchSqlName", 1), "Login")
		set params.searchText = $GET(%request.Data("searchText", 1), "")
		set params.isDown = $GET(%request.Data("isDown", 1), $$$YES)
		set params.sqlName = $GET(%request.Data("sqlName", 1), "Login")
		
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM WC_Data.Recorder", "WC.Data.Recorder", params, "IsInUse=1"))
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="CreateTournamentPrivilegeForRecorder">
<Description>
Create tournament privilege for recorder
Method="POST" Url="/recorder/:recId/tournament/:trnId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>recId:%String,trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(WC.Data.Settings).CurrentUserIsAdmin())
		
		set st = ##class(WC.Data.Recorder).AddAvailableTournament(##class(WC.Data.Recorder).%OpenId(recId), ##class(WC.Data.Tournament).%OpenId(trnId))
		if $$$ISERR(st){ 
      		$$$ThrowStatus(##class(WC.Utils.Msg).GetErrorStatus("error_Recorder_AddTournament", "| "_st))
      	} 
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="RemoveTournamentPrivilegeForRecorder">
<Description>
Delete tournament privilege for recorder
Method="DELETE" Url="/recorder/:recId/tournament/:trnId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>recId:%String,trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(WC.Data.Settings).CurrentUserIsAdmin())
		
		set st = ##class(WC.Data.Recorder).RemoveAvailableTournament(##class(WC.Data.Recorder).%OpenId(recId), ##class(WC.Data.Tournament).%OpenId(trnId))
		if $$$ISERR(st){ 
      		$$$ThrowStatus(##class(WC.Utils.Msg).GetErrorStatus("error_Recorder_RemoveTournament", "| "_st))
      	} 
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetLanguages">
<Description>

=============================================================================================================================
Other                                                                                                                   Other
=============================================================================================================================

Write to device "children" array of proxyObjects [All System languages]
Method="GET" Url="/language"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{		
		set list = ##class(%ListOfObjects).%New()
		
		&sql(DECLARE LangCurs CURSOR FOR
			 SELECT Code, Name 
			 FROM WC_Data_Localization.LTextLanguage
			 ORDER BY Code)
		
		&sql(OPEN LangCurs)
		for{
			&sql(FETCH LangCurs INTO :code, :name) 
			quit:(SQLCODE '= 0)
			
			set proxy = ##class(%ZEN.proxyObject).%New()
			set proxy.code = code
			set proxy.name = name
			set proxy.flagUrl = "img/flags/"_code_".png"
			
			do list.Insert(proxy)	
		}
		
		&sql(CLOSE LangCurs)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.languages = list
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCountries">
<Description>
WDSF Countries
Method="GET" Url="/country"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{		
		set list = ##class(%ListOfObjects).%New()
		
		&sql(DECLARE CountryCurs CURSOR FOR
			 SELECT Name 
			 FROM WC_Data.Country
			 ORDER BY Name)
		
		&sql(OPEN CountryCurs)
		for{
			&sql(FETCH CountryCurs INTO :name) 
			quit:(SQLCODE '= 0)
			
			set proxy = ##class(%ZEN.proxyObject).%New()
			set proxy.name = name
			do list.Insert(proxy)	
		}
		
		&sql(CLOSE CountryCurs)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.countries = list
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetAgeGroups">
<Description>
WDSF Age groups
Method="GET" Url="/ageGroup"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{		
		set list = ##class(%ListOfObjects).%New()
		
		&sql(DECLARE AGCurs CURSOR FOR
			 SELECT ID 
			 FROM WC_Data.AgeGroup
			 ORDER BY FromAge)
		
		&sql(OPEN AGCurs)
		for{
			&sql(FETCH AGCurs INTO :id) 
			quit:(SQLCODE '= 0)
			
			do list.Insert(##class(WC.Data.AgeGroup).%OpenId(id).ConvertToProxyObject($$$YES))	
		}
		
		&sql(CLOSE AGCurs)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.ageGroups = list
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="CheckPrivileges">
<Description>
Check access, authorization call, if needed
Method="GET" Url="/checkprivileges"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.userName = $Username
	set proxy.isAdmin = 0
	
	if (##class(WC.Data.Settings).CurrentUserIsAdmin() = $$$OK){
		set proxy.isAdmin = 1
	}
	
	do proxy.%ToJSON()
	
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="KillSession">
<Description>
Kill session for rest
Method="GET" Url="/killsession"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %session.AppTimeout = 1
	set %session.EndSession = 1
	q $$$OK
]]></Implementation>
</Method>

<Method name="GetResponses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set coupleActiveYouth = ##class(WC.Data.Couple).SyncWDSF("rls-47729", 100000, .st)
	set coupleActiveSenior3 = ##class(WC.Data.Couple).SyncWDSF("rls-1802", 100000, .st)
	set coupleRetairedAdult = ##class(WC.Data.Couple).SyncWDSF("rls-1588", 100000, .st)
	set maleYouth = ##class(WC.Data.Person).SyncWDSF("10083787", 100000, .st)
	set femaleSenior2 = ##class(WC.Data.Person).SyncWDSF("10004700", 100000, .st)
	
	set competitionCoupleAdult = ##class(WC.Data.Competition).SyncWDSF("35093", 1000000, .st)
	set competitionSingleAdult = ##class(WC.Data.Competition).SyncWDSF("45779", 1000000, .st)
	
	set competitionCoupleSenior2SameDay = ##class(WC.Data.Competition).SyncWDSF("45966", 1000000, .st)
	set competitionCoupleUnder21SameDay = ##class(WC.Data.Competition).SyncWDSF("46033", 1000000, .st)

	set conflictCompetitions = ##class(%ListOfObjects).%New()
	do conflictCompetitions.Insert(competitionCoupleSenior2SameDay.ConvertToProxyObject())
	do conflictCompetitions.Insert(competitionCoupleUnder21SameDay.ConvertToProxyObject())
	
	
	set participantCouple = ##class(WC.Data.ParticipantCouple).%New()
	set participantCouple.Competition = competitionCoupleAdult
	set participantCouple.Couple = coupleActiveSenior3
	set participantCouple.CreatedTS = $ZDT($ZTS, 3)
	
	set participantSingle = ##class(WC.Data.ParticipantSingle).%New()
	set participantSingle.Competition = competitionSingleAdult
	set participantSingle.Athlete = coupleActiveSenior3.Man
	set participantSingle.CreatedTS = $ZDT($ZTS, 3)
	
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.responses = ##class(%ListOfObjects).%New()
	
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).RegistrationCompleted(participantCouple))
	
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).DeregistrationCompleted())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).RegistrationExists(participantSingle))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).RegistrationNotExists())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).RecorderNotFound())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).RecorderNoPrivileges(competitionCoupleAdult.Tournament))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CompetitionNotFound())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CompetitionStatusNotForRegistration(competitionCoupleAdult))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CompetitionStatusNotForDeregistration(competitionSingleAdult))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CompetitionIsSoloForOneAthlete(competitionSingleAdult))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CompetitionConflictSameDayRegistration(conflictCompetitions, femaleSenior2))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).TournamentNotFound())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).AthleteEmptyNumber())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).AthleteAgeGroupNotAllowedForCompetition(competitionSingleAdult, maleYouth))
	
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CoupleNotFoundInWDSFById("Test error text 1."))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CoupleNotFoundInWDSFByNumbers("Test error text 2."))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CoupleSyncFailed("234325425", "Test error text 3."))
	
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CoupleAgeGroupNotAllowedForCompetition(competitionCoupleAdult, coupleActiveYouth))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).CoupleStatusNotActive(coupleRetairedAdult))
	
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).PersonSyncFailed("3342342", "Test error text 4."))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).ParticipantSingleNotCreated(competitionSingleAdult, coupleActiveYouth.Man, "Test error text 5."))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).ParticipantCoupleNotCreated(competitionCoupleAdult, coupleActiveSenior3, "Test error text 6."))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).ParticipantSingleNotRemoved(participantSingle, "Test error text 7."))
	
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).ParticipantCoupleNotRemoved(participantCouple, "Test error text 8."))

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).ParticipantNotFound())

	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).DateNotValid())
	//w !,"-----------------------------------------------------------------------------------------",!
	do proxy.responses.Insert(##class(WC.Utils.Response).TimeStampNotValid())
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
