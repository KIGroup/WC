<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WC.Web.BrokerAdmin">
<Super>%CSP.REST</Super>
<TimeCreated>63370,70531.681464</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>

<!-- ======================================================================================================================= -->
<!-- Registration / Deregistration                                                             Registration / Deregistration -->
<!-- ======================================================================================================================= -->

<!-- Create participant for competition -->
<Route Method="POST" Url="/registration" Call="WC.Web.JsonAdmin:Registration"/>

<!-- Remove participant from competition -->
<Route Method="POST" Url="/deregistration" Call="WC.Web.JsonAdmin:Deregistration"/>


<!-- ======================================================================================================================= -->
<!-- Tournament                                                                                                   Tournament -->
<!-- ======================================================================================================================= -->

<!-- Get list of tournaments by filter params -->
<Route Method="GET" Url="/tournament" Call="WC.Web.JsonAdmin:GetTournaments"/>

<!-- Get one tournament by id -->
<Route Method="GET" Url="/tournament/:id" Call="WC.Web.JsonAdmin:GetTournament"/>

<!-- Get list of tournaments for GRID -->
<Route Method="GET" Url="/grid/tournament" Call="WC.Web.JsonAdmin:GetTournamentsForGrid"/>


<!-- ======================================================================================================================= -->
<!-- Competition                                                                                                 Competition -->
<!-- ======================================================================================================================= -->

<!-- Get list of competitions by filter params -->
<Route Method="GET" Url="/competition" Call="WC.Web.JsonAdmin:GetCompetitions"/>

<!-- Get one competition by id -->
<Route Method="GET" Url="/competition/:id" Call="WC.Web.JsonAdmin:GetCompetition"/>

<!-- Get list of competitions for GRID -->
<Route Method="GET" Url="/grid/competition" Call="WC.Web.JsonAdmin:GetCompetitionsForGrid"/>

<!-- Get all years -->
<Route Method="GET" Url="/year" Call="WC.Web.JsonAdmin:GetCompetitionYears"/>


<!-- ======================================================================================================================= -->
<!-- Participant                                                                                                 Participant -->
<!-- ======================================================================================================================= -->

<!-- Get list of participants -->
<Route Method="GET" Url="/participant" Call="WC.Web.JsonAdmin:GetParticipants"/>

<!-- Get list of participants -->
<Route Method="GET" Url="/participant/:id" Call="WC.Web.JsonAdmin:GetParticipant"/>


<!-- ======================================================================================================================= -->
<!-- Person                                                                                                           Person -->
<!-- ======================================================================================================================= -->

<!-- Get list of persons by filter params -->
<Route Method="GET" Url="/person" Call="WC.Web.JsonAdmin:GetPersons"/>

<!-- Get one person by id -->
<Route Method="GET" Url="/person/:id" Call="WC.Web.JsonAdmin:GetPerson"/>


<!-- ======================================================================================================================= -->
<!-- Couple                                                                                                           Couple -->
<!-- ======================================================================================================================= -->

<!-- Get list of couples by filter params -->
<Route Method="GET" Url="/couple" Call="WC.Web.JsonAdmin:GetCouples"/>

<!-- Get one couple by id -->
<Route Method="GET" Url="/couple/:id" Call="WC.Web.JsonAdmin:GetCouple"/>


<!-- ======================================================================================================================= -->
<!-- Recorder                                                                                                       Recorder -->
<!-- ======================================================================================================================= -->

<!-- Save recorder -->
<Route Method="POST" Url="/recorder" Call="WC.Web.JsonAdmin:SaveRecorder"/>

<!-- Get recorder by id -->
<Route Method="GET" Url="/recorder/:id" Call="WC.Web.JsonAdmin:GetRecorder"/>

<!-- Delete recorder by id -->
<Route Method="DELETE" Url="/recorder/:id" Call="WC.Web.JsonAdmin:DeleteRecorder"/>

<!-- Get recorders for GRID -->
<Route Method="GET" Url="/grid/recorder" Call="WC.Web.JsonAdmin:GetRecordersForGrid"/>

<!-- Create tournament privilege for recorder -->
<Route Method="POST" Url="/recorder/:recId/tournament/:trnId" Call="WC.Web.JsonAdmin:CreateTournamentPrivilegeForRecorder"/>

<!-- Delete tournament privilege for recorder -->
<Route Method="DELETE" Url="/recorder/:recId/tournament/:trnId" Call="WC.Web.JsonAdmin:RemoveTournamentPrivilegeForRecorder"/>


<!-- ======================================================================================================================= -->
<!-- Other                                                                                                             Other -->
<!-- ======================================================================================================================= -->

<!-- Get system languages -->
<Route Method="GET" Url="/language" Call="WC.Web.JsonAdmin:GetLanguages"/>

<!-- CheckPrivileges -->
<Route Method="GET" Url="/checkprivileges" Call="WC.Web.JsonAdmin:CheckPrivileges"/>

<!-- Exit | Kill session -->
<Route Method="GET" Url="/killsession" Call="WC.Web.JsonAdmin:KillSession"/>

</Routes>
]]></Data>
</XData>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), "ru" : "ru", :"en")
	do ##class(%MessageDictionary).SetSessionLanguage(lang)
	set %session.Language = lang
	
	d %response.SetHeader("Access-Control-Allow-Origin","*")
	d %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	d %response.SetHeader("Access-Control-Max-Age","10000")
	d %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization") 
	

    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="Login">
<Description>
Called for a REST page in the event of a login being required</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>skipheader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d %response.SetHeader("Access-Control-Allow-Origin","*")
	d %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	d %response.SetHeader("Access-Control-Max-Age","10000")
	d %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization")

	if (%request.GetCgiEnv("REQUEST_METHOD") = "OPTIONS"){
		Do %response.WriteHTTPHeader()
		q $$$OK
	}
	
    #; Don't want the session token
    Set %response.OutputSessionToken=0
    
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
    
    #; We want Basic authentication
    Do %response.SetHeader("WWW-Authenticate","Basic")
    
    #; Write out the header
    Do %response.WriteHTTPHeader()
    
    #; Done
    Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
